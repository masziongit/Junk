{"version":3,"sources":["../../src/api/prospect_profile.js"],"names":["util","config_func","config","db","logger","api","errRes","errObj","allfield","reqfield","oracledb","require","post","validate","req","res","errors","isEmpty","error","array","msg","status","json","badRequest","field","param","oname","body","value","isValid","length","endsWith","sql","dabaseTable","prospect_profile","debug","params","prospect_id","type","NUMBER","dir","BIND_OUT","create_date","DATE","execute","then","r","outBinds","Object","assign","commit","beautifyResponse","info","catch","e","rollback","internalServerError","get","id","extractId","prospect_profile_get","toString","outFormat","OBJECT","rows","changeStatusToExpired","notFound","invParam","exists","condition","mobile_no","mobileNo","citizen_id","citizenId","passport_no","passportNo","firstname_en","lastname_en","firstNameEn","lastNameEn","firstname_th","lastname_th","firstNameTh","lastNameTh","JSON","parse","stringify","_","map","reject","prospect_status","put","checkObj","prospectId","setfields","update_date","tz","format","delete","prospect_profile_delete","split","parseInt","transform","result","val","key","toLowerCase","object","prospect","now","Array","forEach","expired","o","createDate","moment","diff","expire_day"],"mappings":"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","file":"prospect_profile.js","sourcesContent":["/* eslint-disable no-mixed-spaces-and-tabs,valid-typeof */\r\nimport {version} from '../../package.json'\r\nimport {Router} from 'express'\r\nimport {check, oneOf, validationResult} from 'express-validator/check'\r\nimport empty from 'is-empty'\r\nimport * as util from '../lib/util.js'\r\nimport {prospect_profile_delete, prospect_profile_get} from './sql.js'\r\nimport moment from 'moment-timezone'\r\nimport _ from 'lodash';\r\nimport pad from 'pad-number';\r\n\r\nlet config_func;\r\n\r\nexport default ({config, db,logger}) => {\r\n\r\n    let api = Router();\r\n    const errRes = config.errObj\r\n    const allfield = [ 'crm_id',  'citizen_id',  'cid_issue_date',  'cid_expiry_date',  'passport_no',  'pp_issue_date',  'pp_expiry_date',  'title_th',  'firstname_th',  'lastname_th',  'title_en',  'firstname_en',  'lastname_en',  'birth_date',  'birth_place',  'reg_addr_nmbr',  'reg_addr_moo',  'reg_addr_building',  'reg_addr_soi',  'reg_addr_road',  'reg_district',  'reg_subdistrict',  'reg_country',  'reg_province',  'reg_postal_cd',  'mobile_no',  'gender',  'marital_status',  'nationality',  'other_nationality',  'education',  'occupation',  'income',  'country_income',  'source_income',  'purpose_for_open_account',  'purpose_for_other',  'pers_ph_nbr',  'pers_ph_ext',  'office_ph_nbr',  'office_ph_ext',  'con_addr_nmbr',  'con_addr_moo',  'con_addr_building',  'con_addr_soi',  'con_addr_road',  'con_district',  'con_subdistrict',  'con_country',  'con_province',  'con_postal_cd',  'company_name',  'off_addr_nmbr',  'off_addr_moo',  'off_addr_building',  'off_addr_soi',  'off_addr_road',  'off_district',  'off_subdistrict',  'off_country',  'off_province',  'off_postal_cd',  'current_same_registered_flag',  'office_same_registered_flag',  'fatca_ans',  'laser_number',  'dopa_flag',  'risklevel',  'risk_calculation_date',  'swf_status',  'email',  'occupation_specify',  'flow_status',  'e_consent_flag',  'ekyc_consent_flag',  'ekyc_consent_date',  'confidence_score',  'prospect_status',  'app_id',  'channel' ]\r\n    const reqfield = ['citizen_id', 'prospect_status', 'app_id']\r\n    const oracledb = require('oracledb');\r\n\r\n    config_func = config;\r\n\r\n    api.post('/', util.validate(reqfield),\r\n        (req, res) => {\r\n            // logger.debug(`Get Request body : ${JSON.stringify(req.body)}`)\r\n\r\n            const errors = validationResult(req);\r\n            if (!errors.isEmpty()) {\r\n                logger.error(errors.array()[0].msg)\r\n                return res.status(400).json(errRes.badRequest);\r\n            }\r\n\r\n            let field = ''\r\n            let param = ''\r\n\r\n            for (let oname in req.body) {\r\n                field += oname + ','\r\n                let value = req.body[oname]\r\n\r\n                if (moment(value, 'YYYY-MM-DD').isValid() && value.length == 10) {\r\n                    param += `TO_DATE('${value}','YYYY-MM-DD')`\r\n                } else if (oname.endsWith('_flag')) {\r\n                    param += (value ? 1 : 0)\r\n                } else {\r\n                    param += value==null?null:`'${value}'`\r\n                }\r\n\r\n                param += ','\r\n\r\n            }\r\n\r\n            field = field + `CREATE_DATE , UPDATE_DATE`\r\n            param = param + `SYSDATE,SYSDATE`\r\n\r\n            let sql = `INSERT INTO ${config.dabaseTable.prospect_profile} (${field}) \r\n                        VALUES (${param}) \r\n                        RETURNING PROSPECT_ID,CREATE_DATE INTO :prospect_id,:create_date`\r\n\r\n            logger.debug(`Sql : ${sql}`)\r\n            //${Math.floor(Math.random() * Math.pow(10, 7))},\r\n            let params = {\r\n                prospect_id: {type: oracledb.NUMBER, dir: oracledb.BIND_OUT},\r\n                create_date: {type: oracledb.DATE, dir: oracledb.BIND_OUT}\r\n            }\r\n            db.execute(sql, params)\r\n                .then((r) => {\r\n                    let json = {\r\n                        prospect_id: r.outBinds.prospect_id[0],\r\n                        create_date: r.outBinds.create_date[0]\r\n                    }\r\n                    Object.assign(json,req.body)\r\n\r\n                    db.commit()\r\n                    res.status(200).json(beautifyResponse(json))\r\n\r\n                    logger.info(`Insert data complete!!`)\r\n                    // //logger.debug(`Send Response body : ${JSON.stringify(json)}`)\r\n                })\r\n                .catch((e) => {\r\n                    db.rollback()\r\n                    res.status(500).json(errRes.internalServerError);\r\n                    logger.error(e)\r\n                    throw e\r\n                })\r\n        });\r\n\r\n    api.get('/:id', (req, res) => {\r\n\r\n        // logger.debug(`Get Request body : ${JSON.stringify(req.body)}`)\r\n\r\n        if (!empty(req.params.id)) {\r\n            const id = extractId(req.params.id)\r\n\r\n            logger.debug(`Sql: ${prospect_profile_get}`)\r\n            logger.debug(`prospect_id : ${id}`)\r\n\r\n            db.execute(prospect_profile_get, [id.toString()], {outFormat: oracledb.OBJECT})\r\n                .then((r) => {\r\n                    if (!empty(r.rows)) {\r\n                        let json = beautifyResponse(r.rows[0])\r\n                        json = changeStatusToExpired(json,logger)\r\n                        res.status(200).json(json)\r\n\r\n                        logger.info(`Search Data complete!!`)\r\n                        // //logger.debug(`Send Response body : ${JSON.stringify(json)}`)\r\n                    } else {\r\n                        res.status(404).json(errRes.notFound)\r\n                        logger.error(errRes.notFound)\r\n                    }\r\n                }).catch((e) => {\r\n                res.status(500).json(errRes.internalServerError)\r\n                logger.error(e)\r\n                throw e\r\n            })\r\n\r\n        }\r\n        else {\r\n            res.status(400).json(errRes.invParam)\r\n            logger.error(errRes.invParam)\r\n        }\r\n    });\r\n\r\n    api.post('/search',\r\n        oneOf([check('mobile_no').exists(),\r\n            check('citizen_id').exists(),\r\n            check('passport_no').exists(),\r\n            check('firstname_en').exists(),\r\n            check('lastname_en').exists(),\r\n            check('firstname_th').exists(),\r\n            check('lastname_th').exists()]),\r\n        (req, res) => {\r\n\r\n            // logger.debug(`Get Request body : ${JSON.stringify(req.body)}`)\r\n\r\n            const errors = validationResult(req);\r\n            if (!errors.isEmpty()) {\r\n                logger.error(errors.array()[0].msg)\r\n                return res.status(400).json(errRes.badRequest);\r\n            }\r\n            let sql = `SELECT * FROM prospect_profile p WHERE 1=1`;\r\n            let condition = {};\r\n            if (req.body.mobile_no != null) {\r\n                sql += \" AND p.mobile_no = :mobileNo\";\r\n                Object.assign(condition, {mobileNo: req.body.mobile_no});\r\n            }\r\n            if (req.body.citizen_id != null) {\r\n                sql += \" AND p.citizen_id = :citizenId\";\r\n                Object.assign(condition, {citizenId: req.body.citizen_id});\r\n            }\r\n            if (req.body.passport_no != null) {\r\n                sql += \" AND p.passport_no = :passportNo\";\r\n                Object.assign(condition, {passportNo: req.body.passport_no});\r\n            }\r\n            if (req.body.firstname_en != null && req.body.lastname_en != null) {\r\n                sql += \" AND p.firstname_en LIKE :firstNameEn AND p.lastname_en LIKE :lastNameEn\";\r\n                Object.assign(condition, {\r\n                    firstNameEn: req.body.firstname_en + \"%\",\r\n                    lastNameEn: req.body.lastname_en + \"%\"\r\n                })\r\n            }\r\n            if (req.body.firstname_th != null && req.body.lastname_th != null) {\r\n                sql += \" AND p.firstname_th LIKE :firstNameTh AND p.lastname_th LIKE :lastNameTh\";\r\n                Object.assign(condition, {\r\n                    firstNameTh: req.body.firstname_th + \"%\",\r\n                    lastNameTh: req.body.lastname_th + \"%\"\r\n                })\r\n            }\r\n\r\n            sql += \" ORDER BY UPDATE_DATE DESC\";\r\n\r\n            logger.debug(`Sql: ${sql}`)\r\n\r\n            db.execute(sql, condition, {outFormat: oracledb.OBJECT})\r\n                .then((r) => {\r\n                    if (!empty(r)) {\r\n                        let json = JSON.parse(JSON.stringify(r.rows))\r\n                        json = _.map(json, beautifyResponse);\r\n                        json = changeStatusToExpired(json,logger);\r\n                        json = _.reject(json, {prospect_status: 'EXPIRED'});\r\n                        if (json.length < 1){\r\n                            res.status(200).json({msg:\"All data is EXPIRED\"})\r\n                        } else {\r\n                            res.status(200).json(json)\r\n                        }\r\n\r\n                        logger.info(`Search Data complete!!`)\r\n                        //logger.debug(`Send Response body : ${JSON.stringify(json)}`)\r\n\r\n                    } else {\r\n                        res.status(404).json(errRes.notFound)\r\n                        logger.error(errRes.notFound)\r\n                    }\r\n                }).catch((e) => {\r\n                res.status(500).json(errRes.internalServerError)\r\n                logger.error(e)\r\n                throw e\r\n            })\r\n        });\r\n\r\n    api.put('/:id',oneOf(util.validate(allfield)),\r\n        (req, res) => {\r\n\r\n        // logger.debug(`Get Request body : ${JSON.stringify(req.body)}`)\r\n        const errors = validationResult(req);\r\n\r\n        // Validate request body\r\n        if (!errors.isEmpty()|| util.checkObj(allfield,req.body) ) {\r\n            logger.error(errRes.badRequest)\r\n            return res.status(400).json(errRes.badRequest);\r\n        }\r\n        // Validate url\r\n        if (empty(req.params.id)) {\r\n            logger.error(errRes.invParam)\r\n            return res.status(400).json(errRes.invParam)\r\n        }\r\n        let prospectId = extractId(req.params.id);\r\n\r\n        let setfields = ''\r\n\r\n        for (let oname in req.body) {\r\n\r\n            let value = `${req.body[oname]}`\r\n\r\n            if (moment(value, 'YYYY-MM-DD').isValid() && value.length == 10) {\r\n                value = `TO_DATE('${value}','YYYY-MM-DD')`\r\n            } else if (oname.endsWith('_flag')) {\r\n                value = value ? 1 : 0\r\n            }else if(value=='null'){\r\n                value = null\r\n            }else {\r\n                value = `'${value}'`\r\n            }\r\n\r\n            setfields += `${oname} = ${value},`\r\n        }\r\n\r\n        setfields += `UPDATE_DATE = SYSDATE`\r\n\r\n        let sql = `UPDATE  ${config.dabaseTable.prospect_profile} SET ${setfields} WHERE PROSPECT_ID = ${prospectId}`\r\n\r\n        logger.debug(`Sql : ${sql}`)\r\n\r\n        db.execute(sql)\r\n            .then((r) => {\r\n\r\n                let json = {\r\n                    prospect_id: prospectId,\r\n                    update_date: moment().tz(\"Asia/Bangkok\").format('YYYY-MM-DD HH:mm:ss')\r\n                }\r\n                Object.assign(json,req.body)\r\n\r\n                db.commit()\r\n                res.status(200).json(beautifyResponse(json))\r\n\r\n                logger.info(`Update data complete!!`)\r\n                //logger.debug(`Send Response body : ${JSON.stringify(json)}`)\r\n            })\r\n            .catch((e) => {\r\n                db.rollback()\r\n                res.status(500).json(errRes.internalServerError);\r\n                logger.error(e)\r\n                throw e\r\n\r\n            })\r\n\r\n    });\r\n\r\n    api.delete('/:id', (req, res) => {\r\n\r\n        // logger.debug(`Get Request body : ${JSON.stringify(req.body)}`)\r\n\r\n        if (!empty(req.params.id)) {\r\n            const id = extractId(req.params.id)\r\n\r\n            logger.debug(`Sql: ${prospect_profile_delete}`)\r\n            logger.debug(`prospectId : ${id}`)\r\n\r\n            db.execute(prospect_profile_delete, [id])\r\n                .then((r) => {\r\n\r\n                    db.commit()\r\n                    let json = {prospect_id: id}\r\n                    res.status(200).json(beautifyResponse(json))\r\n\r\n                    logger.info(`Delete data complete!!`)\r\n                    //logger.debug(`Send Response body : ${JSON.stringify(json)}`)\r\n\r\n                }).catch((e) => {\r\n                db.rollback()\r\n                res.status(500).json(errRes.internalServerError)\r\n                logger.error(e)\r\n                throw e\r\n            })\r\n\r\n        }\r\n        else {\r\n            res.status(400).json(errRes.invParam)\r\n            logger.error(errRes.invParam)\r\n        }\r\n    });\r\n    return api\r\n}\r\n\r\nlet extractId = (id) => {\r\n    let split = id.split(/P\\d{4}/)\r\n\r\n    if (split.length != 2) {\r\n        return \"\";\r\n    }\r\n    return parseInt(split[1]);\r\n}\r\n\r\nlet beautifyResponse = (json) => {\r\n    json = _.transform(json, (result, val, key) => {\r\n        result[key.toLowerCase()] = val;\r\n        if (key.toLowerCase().endsWith('_flag')) {\r\n            result[key.toLowerCase()] = val==='true' ? true : false\r\n        }\r\n        if(val==null){\r\n            result[key.toLowerCase()] = ''\r\n        }\r\n        if(key.toLowerCase().endsWith('_date')){\r\n            result[key.toLowerCase()] = moment(val).format(\"YYYY-MM-DD\")\r\n        }\r\n    });\r\n    json.prospect_id = `P${moment(json.create_date).format(\"YYMM\")}${pad(parseInt(json.prospect_id), 7)}`;\r\n    return json;\r\n}\r\n\r\n\r\nlet changeStatusToExpired = (object,logger) => {\r\n    let prospect = JSON.parse(JSON.stringify(object));\r\n    const now = moment().tz(\"Asia/Bangkok\");\r\n\r\n    if (prospect instanceof  Array){\r\n        prospect.forEach(o=>{\r\n            expired(now,o,logger)\r\n        })\r\n    } else {\r\n        expired(now,prospect,logger)\r\n    }\r\n\r\n    return prospect\r\n}\r\n\r\nlet expired = (now,o,logger)=>{\r\n    let createDate = moment.tz(o.create_date, \"Asia/Bangkok\")\r\n    if (now.diff(createDate, \"days\") >= config_func.expire_day) {\r\n        o.prospect_status = \"EXPIRED\"\r\n        logger.info(`This Data is EXPIRED`)\r\n        logger.debug(`Data : ${JSON.stringify(o)}`)\r\n    }\r\n}\r\n"]}
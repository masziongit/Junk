{"version":3,"sources":["../src/index.js"],"names":["app","options","ca","fs","readFileSync","config","certs","process","env","CA","cert","CERT","key","KEY","log4js","configure","log4j_configure","logger","getLogger","LOG_CATEGORY","morganConfig","maxBodyLength","logRequestBody","level","logResponseBody","use","connectLogger","exposedHeaders","corsHeaders","bodyParser","json","limit","bodyLimit","oracledb","require","db","info","toString","toUpperCase","debug","JSON","stringify","listen","PORT","port","console","log","server","https","createServer","PORTS","ports","setInterval","execute","outFormat","OBJECT","then","resp","catch","error","err","exit","closePoolAndExit","getPool","close","message","once"],"mappings":"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","file":"index.js","sourcesContent":["import https from 'https';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport morganBody from 'morgan-body';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport initializeDb from './db';\r\nimport middleware from './middleware';\r\nimport config from './config.json';\r\nimport prospect_profile from './api/prospect_profile.js';\r\nimport prospect_idp_log from './api/prospect_idp_log.js';\r\nimport log4js  from 'log4js'\r\nimport fs from 'fs';\r\n\r\nlet app = express();\r\n// app.server = http.createServer(app);\r\n\r\nlet options = {\r\n    ca: fs.readFileSync(config.certs.ca || process.env.CA),\r\n    cert: fs.readFileSync(config.certs.cert || process.env.CERT),\r\n    key: fs.readFileSync(config.certs.key || process.env.KEY)\r\n};\r\n\r\nlog4js.configure(config.log4j_configure);\r\n\r\nconst logger = log4js.getLogger(process.env.LOG_CATEGORY);\r\n\r\nconst morganConfig = {\r\n    maxBodyLength: 10000,\r\n    logRequestBody:!(logger.level =='INFO'),\r\n    logResponseBody:!(logger.level =='INFO')\r\n}\r\n// logger\r\nmorganBody(app,morganConfig);\r\n\r\napp.use(log4js.connectLogger(logger,{ level: 'auto' }));\r\n\r\n// 3rd party middleware\r\napp.use(cors({\r\n    exposedHeaders: config.corsHeaders\r\n}));\r\n\r\napp.use(bodyParser.json({\r\n    limit: config.bodyLimit\r\n}));\r\n\r\n// connect to db\r\ninitializeDb (logger,db => {\r\n    const oracledb = require('oracledb');\r\n    // internal middleware\r\n    app.use(middleware({config, db}));\r\n\r\n    // api router\r\n    app.use('/prospect_profile', prospect_profile({config, db ,logger}));\r\n    app.use('/prospect_idp_log', prospect_idp_log({config, db ,logger}));\r\n\r\n    logger.info(`Log level [${logger.level.toString().toUpperCase()}]`);\r\n    logger.debug(`Log4j config ${JSON.stringify(config.log4j_configure)}`);\r\n\r\n    app.listen(process.env.PORT || config.port,() => {\r\n        console.log(`Started Http on PROSPECT`);\r\n        logger.info(`Started Http on port ${process.env.PORT || 'default'}`);\r\n    });\r\n\r\n    const server = https.createServer(options, app);\r\n    server.listen(process.env.PORTS || config.ports, () => {\r\n        console.log(`Started Https on PROSPECT`);\r\n        logger.info(`Started Https on port ${process.env.PORTS || 'default'}`);\r\n    });\r\n    \r\n    setInterval(function () {\r\n        db.execute('SELECT 1 FROM DUAL',[],{outFormat: oracledb.OBJECT}).then(function (resp) {\r\n            // logger.info(` checking database connection ${JSON.stringify(resp)}`);\r\n        }).catch(err=>{\r\n            logger.error(err)\r\n            process.exit(1)\r\n        });\r\n    }, 1000);\r\n\r\n    function closePoolAndExit() {\r\n        console.log(\"\\nTerminating\");\r\n        try {\r\n            // Get the pool from the pool cache and close it when no\r\n            // connections are in use, or force it closed after 10 seconds\r\n            oracledb.getPool().close(10, function(err) {\r\n                if (err)\r\n                    console.error(err.message);\r\n                else\r\n                    console.log(\"Pool closed\");\r\n                process.exit(0);\r\n            });\r\n        } catch(err) {\r\n            logger.error(err);\r\n            process.exit(1);\r\n        }\r\n    }\r\n\r\n    process\r\n        .once('SIGTERM', closePoolAndExit)\r\n        .once('SIGINT',  closePoolAndExit);\r\n\r\n\r\n});\r\n\r\nexport default app;\r\n"]}
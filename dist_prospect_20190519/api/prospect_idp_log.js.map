{"version":3,"sources":["../../src/api/prospect_idp_log.js"],"names":["util","config","db","logger","api","errRes","errObj","reqfield","oracledb","require","post","validate","req","res","errors","isEmpty","error","array","msg","status","json","badRequest","field","param","oname","body","value","isValid","length","endsWith","sql","dabaseTable","prospect_idp_log","debug","params","reference_id","type","STRING","dir","BIND_OUT","execute","then","r","outBinds","create_date","tz","format","Object","assign","commit","beautifyResponse","info","catch","e","rollback","internalServerError","get","prospect_id","invParam","id","prospectIdpLogGet","outFormat","OBJECT","console","log","rows","JSON","parse","stringify","_","map","notFound","put","prospectId","setfields","update_date","delete","prospect_idp_log_delete","transform","result","val","key","toLowerCase"],"mappings":"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","file":"prospect_idp_log.js","sourcesContent":["/* eslint-disable no-mixed-spaces-and-tabs */\r\nimport {version} from '../../package.json';\r\nimport {Router} from 'express';\r\nimport {validationResult} from 'express-validator/check';\r\nimport empty from 'is-empty'\r\nimport {prospect_idp_log_delete, prospectIdpLogGet} from './sql.js'\r\nimport moment from 'moment-timezone'\r\nimport _ from 'lodash';\r\nimport * as util from \"../lib/util\";\r\n\r\nexport default ({config, db ,logger}) => {\r\n\r\n    let api = Router();\r\n    const errRes = config.errObj\r\n    const reqfield = ['reference_id', 'identifier', 'namespace', 'status', 'request_date', 'exp_date']\r\n    const oracledb = require('oracledb');\r\n\r\n    api.post('/', util.validate(reqfield),\r\n        (req, res) => {\r\n\r\n            // logger.debug(`Get Request body : ${JSON.stringify(req.body)}`)\r\n\r\n            const errors = validationResult(req);\r\n\r\n            if (!errors.isEmpty()) {\r\n                logger.error(errors.array()[0].msg)\r\n                return res.status(400).json(errRes.badRequest);\r\n            }\r\n\r\n            let field = ''\r\n            let param = ''\r\n\r\n            for (let oname in req.body) {\r\n                field += oname + ','\r\n                let value = req.body[oname]\r\n\r\n                if (moment(value, 'YYYY-MM-DD').isValid() && value.length == 10) {\r\n                    param += `TO_DATE('${value}','YYYY-MM-DD'),`\r\n                } else if (oname.endsWith('_flag')) {\r\n                    param += value ? 1 : 0 + ','\r\n                } else {\r\n                    param += `'${value}',`\r\n                }\r\n            }\r\n\r\n            field = field + `CREATE_DATE , UPDATE_DATE`\r\n            param = param + `SYSDATE,SYSDATE`\r\n\r\n                let sql = `INSERT INTO ${config.dabaseTable.prospect_idp_log} (${field}) \r\n                        VALUES (${param}) \r\n                        RETURNING REFERENCE_ID INTO :reference_id `\r\n\r\n            logger.debug(`Sql : ${sql}`)\r\n\r\n            let params = {\r\n                reference_id: {type: oracledb.STRING, dir: oracledb.BIND_OUT},\r\n            }\r\n\r\n            db.execute(sql, params)\r\n                .then((r) => {\r\n                    let json = {\r\n                        reference_id: r.outBinds.reference_id[0],\r\n                        create_date: moment().tz(\"Asia/Bangkok\").format('YYYY-MM-DD HH:mm:ss')\r\n                    }\r\n                    Object.assign(json,req.body)\r\n\r\n                    db.commit()\r\n                    res.status(200).json(beautifyResponse(json))\r\n\r\n                    logger.info(`Insert data complete!!`)\r\n                    //logger.debug(`Send Response body : ${JSON.stringify(json)}`)\r\n                })\r\n                .catch((e) => {\r\n                    db.rollback()\r\n                    res.status(500).json(errRes.internalServerError);\r\n                    logger.error(e)\r\n                    throw e\r\n                })\r\n        });\r\n\r\n    api.get('/:prospect_id', (req, res) => {\r\n\r\n        // logger.debug(`Get Request body : ${JSON.stringify(req.body)}`)\r\n\r\n        if (empty(req.params.prospect_id)) {\r\n            logger.error(errRes.invParam)\r\n            return res.status(400).json(errRes.invParam)\r\n        }\r\n        const id = req.params.prospect_id\r\n        db.execute(prospectIdpLogGet, [id], {outFormat: oracledb.OBJECT})\r\n            .then((r) => {\r\n                if (!empty(r)) {\r\n                    console.log(r.rows)\r\n                    let json = JSON.parse(JSON.stringify(r.rows))\r\n                    json = _.map(json, beautifyResponse);\r\n                    res.status(200).json(json)\r\n\r\n                    logger.info(`Search data complete!!`)\r\n                    //logger.debug(`Send Response body : ${JSON.stringify(json)}`)\r\n\r\n                } else {\r\n                    res.status(404).json(errRes.notFound)\r\n                }\r\n            }).catch((e) => {\r\n            res.status(500).json(errRes.internalServerError)\r\n            logger.error(e)\r\n            throw e\r\n        })\r\n    });\r\n\r\n\r\n    api.put('/:prospect_id', (req, res) => {\r\n\r\n        // logger.debug(`Get Request body : ${JSON.stringify(req.body)}`)\r\n\r\n        const errors = validationResult(req);\r\n        // Validate request body\r\n        if (!errors.isEmpty()) {\r\n            logger.error(errors.array()[0].msg)\r\n            return res.status(400).json(errRes.badRequest);\r\n        }\r\n        // Validate url\r\n        if (empty(req.params.prospect_id)) {\r\n            logger.error(errRes.invParam)\r\n            return res.status(400).json(errRes.invParam)\r\n        }\r\n        let prospectId = req.params.prospect_id;\r\n\r\n        let setfields = ''\r\n\r\n        for (let oname in req.body) {\r\n\r\n            let value = `${req.body[oname]}`\r\n\r\n            if (moment(value, 'YYYY-MM-DD').isValid() && value.length == 10) {\r\n                value = `TO_DATE('${value}','YYYY-MM-DD')`\r\n            } else if (oname.endsWith('_flag')) {\r\n                value = value ? 1 : 0\r\n            } else {\r\n                value = `'${value}'`\r\n            }\r\n\r\n            setfields += `${oname} = ${value},`\r\n        }\r\n\r\n        setfields += `UPDATE_DATE = SYSDATE`\r\n\r\n        let sql = `UPDATE  ${config.dabaseTable.prospect_idp_log} SET ${setfields} WHERE PROSPECT_ID = ${prospectId}`\r\n\r\n        logger.debug(`Sql : ${sql}`)\r\n\r\n        db.execute(sql)\r\n            .then((r) => {\r\n\r\n                let json = {\r\n                    prospect_id: prospectId,\r\n                    update_date: moment().tz(\"Asia/Bangkok\").format('YYYY-MM-DD HH:mm:ss')\r\n                }\r\n                Object.assign(json,req.body)\r\n\r\n                db.commit()\r\n                res.status(200).json(beautifyResponse(json))\r\n\r\n                logger.info(`Update data complete!!`)\r\n                //logger.debug(`Send Response body : ${JSON.stringify(json)}`)\r\n            })\r\n            .catch((e) => {\r\n                db.rollback()\r\n                res.status(500).json(errRes.internalServerError);\r\n                logger.error(e)\r\n                throw e\r\n\r\n            })\r\n    });\r\n\r\n    api.delete('/:id', (req, res) => {\r\n\r\n        // logger.debug(`Get Request body : ${JSON.stringify(req.body)}`)\r\n\r\n        if (!empty(req.params.id)) {\r\n            const id = req.params.id\r\n            db.execute(prospect_idp_log_delete, [id])\r\n                .then((r) => {\r\n                    db.commit()\r\n                    let json = {prospect_id: id}\r\n                    res.status(200).json(beautifyResponse(json))\r\n\r\n                    logger.info(`Delete data complete!!`)\r\n                    //logger.debug(`Send Response body : ${JSON.stringify(json)}`)\r\n\r\n                }).catch((e) => {\r\n                db.rollback()\r\n                res.status(500).json(errRes.internalServerError)\r\n                logger.error(e)\r\n                throw e\r\n            })\r\n        }\r\n        else {\r\n            res.status(400).json(errRes.invParam)\r\n            logger.error(errRes.invParam)\r\n        }\r\n    });\r\n\r\n    return api\r\n}\r\n\r\nlet beautifyResponse = (json) => {\r\n    json = _.transform(json, (result, val, key) => {\r\n        result[key.toLowerCase()] = val;\r\n    });\r\n    return json;\r\n}\r\n\r\n"]}
{"version":3,"sources":["../../src/lib/util.js"],"names":["toRes","toLowerCase","inputDataTable","validate","checkObj","db","res","successMsg","sql","param","query","then","results","result","JSON","parse","stringify","status","json","success","obj","keys","Object","map","k","v","req","tableName","entity","model","table","id","body","prospect_id","params","fields","checkList","forEach","field","push","exists","ch","console","log","name","includes"],"mappings":";;;;;;8QAAA;;QAyBgBA,K,GAAAA,K;QAQAC,W,GAAAA,W;QA0BAC,c,GAAAA,c;QAOAC,Q,GAAAA,Q;QAQAC,Q,GAAAA,Q;;AAxEhB;;AACA;;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,SAASJ,KAAT,CAAeK,EAAf,EAAkBC,GAAlB,EAAsBC,UAAtB,EAAiCC,GAAjC,EAAqCC,KAArC,EAA4C;AAC/CJ,OAAGK,KAAH,CAASF,GAAT,EAAaC,KAAb,EACKE,IADL,CACU,UAACC,OAAD,EAAW;AACb,YAAIC,SAASZ,YAAYa,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeJ,OAAf,CAAX,EAAoC,CAApC,CAAZ,CAAb;AACAN,YAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAASZ,UAAV,EAAqBM,cAArB,EAArB;AACH,KAJL;AAKH;;AAEM,SAASZ,WAAT,CAAqBmB,GAArB,EAA0B;AAC7B,QAAI,CAACA,GAAL,EAAU;AACN;AACH;AACD,QAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAA9C,EAAwD;AACpD;AACH;AACD,QAAIC,OAAOC,OAAOD,IAAP,CAAYD,GAAZ,CAAX;AACA,QAAIP,SAAS,EAAb;AACAQ,SAAKE,GAAL,CAAS,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACpB,YAAI,OAAOD,CAAP,KAAa,QAAjB,EAA2B;AACvB,gBAAI,OAAOJ,IAAII,CAAJ,CAAP,KAAkB,QAAtB,EAAgC;AAC5BX,uBAAOW,EAAEvB,WAAF,EAAP,IAA0BmB,IAAII,CAAJ,EAAOvB,WAAP,EAA1B;AACH,aAFD,MAEO;AACH;AACA,oBAAI,OAAOmB,IAAII,CAAJ,CAAP,KAAkB,QAAlB,IAA8B,QAAOJ,IAAII,CAAJ,CAAP,MAAkB,QAApD,EAA8D;AAC1DX,2BAAOW,EAAEvB,WAAF,EAAP,IAA0BA,YAAYmB,IAAII,CAAJ,CAAZ,CAA1B;AACH,iBAFD,MAEO;AACHX,2BAAOW,EAAEvB,WAAF,EAAP,IAA0BmB,IAAII,CAAJ,CAA1B;AACH;AACJ;AACJ;AACJ,KAbD;AAcA,WAAOX,MAAP;AACH;;AAEM,SAASX,cAAT,CAAwBG,EAAxB,EAA4BqB,GAA5B,EAAiCC,SAAjC,EAA4C;AAC/C,QAAIC,SAASvB,GAAGwB,KAAH,CAAS,EAACC,OAAOH,SAAR,EAAmBI,IAAI,aAAvB,EAAT,CAAb;AACA,QAAID,QAAQF,OAAOF,IAAIM,IAAX,CAAZ;AACAF,UAAMG,WAAN,GAAoBP,IAAIQ,MAAJ,CAAWH,EAA/B;AACA,WAAOD,KAAP;AACH;;AAEM,SAAS3B,QAAT,GAA6B;AAAA,QAAXgC,MAAW,uEAAJ,EAAI;;AAChC,QAAIC,YAAY,EAAhB;AACAD,WAAOE,OAAP,CAAe,UAACC,KAAD,EAAS;AACpBF,kBAAUG,IAAV,CAAe,kBAAMD,KAAN,EAAaE,MAAb,EAAf;AACH,KAFD;AAGA,WAAOJ,SAAP;AACH;;AAEM,SAAShC,QAAT,GAAiC;AAAA,QAAf+B,MAAe,uEAAR,EAAQ;AAAA,QAALf,GAAK;;;AAEpC,QAAIqB,KAAK,KAAT;AACAC,YAAQC,GAAR,CAAYvB,GAAZ;;AAEA,QAAGA,GAAH,EAAO;AACH,aAAK,IAAIwB,IAAT,IAAiBxB,GAAjB,EAAqB;;AAEjB,gBAAI,CAACe,OAAOU,QAAP,CAAgBD,IAAhB,CAAL,EAA2B;AACvBH,qBAAK,IAAL;AACA;AACH;AACJ;AACJ;AACD,WAAOA,EAAP;AACH","file":"util.js","sourcesContent":["/* eslint-disable valid-typeof */\r\n\r\nimport {check} from \"express-validator/check/index\";\r\nimport {prospect_profile_get_last_id} from \"../api/sql\";\r\n\r\n/**\tCreates a callback that proxies node callback style arguments to an Express Response object.\r\n *\t@param {express.Response} res\tExpress HTTP Response\r\n *\t@param {number} [status=200]\tStatus code to send on success\r\n *\r\n *\t@example\r\n *\t\tlist(req, res) {\r\n *\t\t\tcollection.find({}, toRes(res));\r\n *\t\t}\r\n */\r\n// export function toRes(res, status=200) {\r\n// \treturn (err, thing) => {\r\n// \t\tif (err) return res.status(500).send(err);\r\n//\r\n// \t\tif (thing && typeof thing.toObject==='function') {\r\n// \t\t\tthing = thing.toObject();\r\n// \t\t}\r\n// \t\tres.status(status).json(thing);\r\n// \t};\r\n// }\r\n\r\nexport function toRes(db,res,successMsg,sql,param) {\r\n    db.query(sql,param)\r\n        .then((results)=>{\r\n            let result = toLowerCase(JSON.parse(JSON.stringify(results))[0])\r\n            res.status(200).json({success: successMsg,result})\r\n        })\r\n}\r\n\r\nexport function toLowerCase(obj) {\r\n    if (!obj) {\r\n        return;\r\n    }\r\n    if (typeof obj !== 'Object' && typeof obj !== 'object') {\r\n        return;\r\n    }\r\n    var keys = Object.keys(obj);\r\n    var result = {};\r\n    keys.map(function(k, v) {\r\n        if (typeof k === 'string') {\r\n            if (typeof obj[k] === 'string') {\r\n                result[k.toLowerCase()] = obj[k].toLowerCase();\r\n            } else {\r\n                // if the node is an object, perform the same process over that node\r\n                if (typeof obj[k] === 'Object' || typeof obj[k] === 'object') {\r\n                    result[k.toLowerCase()] = toLowerCase(obj[k]);\r\n                } else {\r\n                    result[k.toLowerCase()] = obj[k];\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nexport function inputDataTable(db, req ,tableName) {\r\n    var entity = db.model({table: tableName, id: 'prospect_id'});\r\n    var table = entity(req.body);\r\n    table.prospect_id = req.params.id\r\n    return table\r\n}\r\n\r\nexport function validate(fields=[]) {\r\n    let checkList = []\r\n    fields.forEach((field)=>{\r\n        checkList.push(check(field).exists())\r\n    })\r\n    return checkList\r\n}\r\n\r\nexport function checkObj(fields=[],obj) {\r\n\r\n    let ch = false\r\n    console.log(obj)\r\n\r\n    if(obj){\r\n        for (let name in obj){\r\n\r\n            if (!fields.includes(name)){\r\n                ch = true\r\n                break\r\n            }\r\n        }\r\n    }\r\n    return ch\r\n}\r\n\r\n"]}